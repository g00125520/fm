<html>
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
        <title>how to use git</title>
        <link rel="stylesheet" href="../../comm/css/daily.css">
        <script type="text/javascript" src="~/bookshelf/comm/js/"></script>
    </head>

    <body>
     <div>
        <h5>简单使用</h5>
        <p>创建版本库。创建一文件目录，在目录下执行git init。然后编辑文本文件后，执行git add file把文件添加到仓库。多次执行添加后，执行git commit -m "本次修改的注释"将所有添加提交到仓库。使用git status可查看仓库当前的状态，如修改了那些文件。使用git diff file可以具体查看某个文件具体所做变动。可使用git log查看版本库的提交记录，使用git reset --hard HEAD^恢复版本库到上一个提交版本，可以使用HEAD~10指定第前10个版本。当然也可通过指定commit id的方式，id可在log命令输出中查看。可使用git reflog查看git命令执行的历史。在刚刚创建的仓库中有工作区，暂存区stage和git为我们创建的第一个master分支。git add后文件会暂时存放在仓库的暂存区，然后通过commit提交到master分支。git只对修改进行管理，所有修改必须通过git add提交到暂存区后，在可以进行提交，否则修改的内容无法进行提交。可使用git diff HEAD -- file查看工作区和版本库中最新版本的区别，以确认工作区的修改是否提交。如果修改了工作区的文件，但还没有add，此时想丢弃修改，可使用git checkout -- file丢弃工作区的修改。但已经add到暂存区而又想丢去，则可通过git reset HEAD file后再通过前面的checkout进行丢弃。而如果已经commit到本地仓库，则可进行版本回退。如果已经推送到远程仓库，就么有什么办法了。如果希望删除文件，则git rm file后，然后git commit提交删除到版本库。</p>
        <p>分支管理。每条分支都是一条时间线，记录该分支所有操作历史。git对分支的管理就是对指针的管理。第一次创建仓库，git默认会创建master分支，而HEAD指向当前分支。master指针指向master分支，当前分支为master。当创建新分支后如dev，dev指针指向dev分支，当前分支为dev，所以HEAD指针指向dev。当想合并master和dev分支时，直接将master分支指向dev分支最新的提交就好。创建并切换到dev分支，git checkout -b dev，相当于，git branck dev和git checkout dev。可用git branch查看所有分支。合并指定分支到当前分支git merge dev。删除分支git branch -d dev。由于master分支没有任何修改，此时采用快速合并，也即将master指针直接指向dev最新提交。若master也做了修改，合并就会产生冲突，则需要手工合并冲突后提交。快速合并模式会丢掉dev分支信息，如果想禁用，可使用git merge --no-ff -m ""。当团队一起开发的使用，通常不要在master分支上面干活，而每人应该在自己的dev分支上工作，最后再合并到一起。如果当前分支尚未提交，而需要临时创建一个新的分支进行一些修改，如bug，则可用git stash将当前工作内容储藏起来，然后可进行分支切换并创建分支进行修改后重新返回到原来的工作分支。可用git stash apply恢复之前储藏的工作内容，此时储藏的内容还在，可用git stash drop删除或者git stash pop恢复的同时就删除。可用git stash list查看储藏列表。如果想恢复列表中指定内容，可git stash apply stash@{2}。开发一个新功能时，最好新建一个分支，如果没有合并又希望强制删除，可git branch -D name。当多人协作时，首先可试图用git push origin branch-name推送自己在分支上的修改。若失败，可git pull将分支先下到本地合并后在push到服务器。若pull时提示no tracking info，则说明本地分支和远程分支没有链接关系，可用git branch --set-upstream branch-name origin/branch-name进行关联。可在本地创建与远程对应的分支git checkout -b branch-name origin/branch-name。</p>
        <p>标签管理。标签是仓库的一个快照，可以获取仓库某一时刻的内容。其实为指向某个commit的指针，已方便用一个有意义的名字代替commit id。可使用git tag name创建一个标签，默认为HEAD。也可指定commit id，如git tag name commit-id。也可使用-s参数指定标签使用PGP签名标签以防止伪造标签。git tag -d tagname删除标签。git push origin tagname推送标签到远程。删除本地后再删除远端标签git push origin :refs/tags/tagname。</p>
        <p>远程管理。可以使用github.com作为远端服务器，也可自己搭建git服务器。由于github使用ssh进行通信，所以需在本地产生ssh key并将公钥添加到github上面。首先使用ssh-keygen命令产生公钥和私钥，然后将公钥添加到github上面。然后准备将本地仓库push到github上面。首先git remote add origin git@github.com:g0012552/usegit.git(使用ssh支持的git协议)，推送到远端git push -u origin master。在添加远端时如果使用：https://github.com/g00125520/usegit.git，则在推送的时会出现403鉴权失败。这是因为前门使用了https协议进行通信，可使用命令git remote set-url origin https://g00125520@github.com/g00125520/usegit.git，然后在push时输入key产生时输入的密码即可。 上面是直接将本地代码推送到远端服务器，也可反过来操作，复制远端代码到本地后操作git clone git@github.com:g00125520/usegit.git。</p>
        <p>配置。git config --global user.name/user.email ""。每台机器需自报家门。使用global参数指定机器上的所有仓库都使用该参数，当然也可为每个仓库独立指定。可以在.gitignore文件中指定文件和文件夹让git不进行管理。可为git配置别名git config --global alias.st status，然后git st便等同git status。git config --global alias.uns 'reset HEAD'则git uns test.txt便等同git reset HEAD text.txt。</p>
        <p>搭建git服务器。</p>
        <h5>参考资料</h5>
        <ul>
            <li><a href="http://www.liaoxuefeng.com" target="_blank">git的简单使用</a></li>
        </ul>
    </div>
    </body>
</html>
